encoder <- keras_model_sequential() %>%
layer_dense(units = prod(pixels),
input_shape = c(784), activation = "leaky_relu")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Llibreries a carregar
library(keras)
library(keras3)
library(ggplot2)
library(tensorflow)
mnist <- dataset_mnist()
# 1r. Separem cada conjunt de dades
xtrain <- mnist$train$x # ens quedarem amb aquesta
ytrain <- mnist$train$y
xtest <- mnist$test$x # i aquesta
ytest <- mnist$test$y
# 2n. Escalem al rang [0,1]
xtrain <- xtrain/range(xtrain)[2]
xtest <- xtest/range(xtest)[2] # agafem el 2n valor ja que el primer es 0, és a dir, rang de [0, 255]
# 3r. Remodelem les dades
pixels <- c(28, 28)
xtrain <- array_reshape(xtrain, c(nrow(xtrain), prod(pixels)))
xtest <- array_reshape(xtest, c(nrow(xtest), prod(pixels)))
# Noves dimensions
dime <- cbind(c("X train remodelat", "X train original", "X test remodelat", "X test original"),
c(dim(xtrain)[1], dim(mnist$train$x)[1], dim(xtest)[1], dim(mnist$test$x)[1]),
c(dim(xtrain)[2], dim(mnist$train$x)[2], dim(xtest)[2], dim(mnist$test$x)[2]),
c(" ", dim(mnist$train$x)[3], " ", dim(mnist$test$x)[3]))
kableExtra::kable(dime)
# Encoder
encoder <- keras_model_sequential() %>%
layer_dense(units = prod(pixels),
input_shape = c(784), activation = "leaky_relu")
prod(pixels)
pixels
28*28
# Encoder
encoder <- keras_model_sequential() %>%
layer_dense(units = 256,
input_shape = c(784), activation = "leaky_relu")
keras_model_sequential()
layer_dense(units = 256,
input_shape = c(784), activation = "leaky_relu")
keras_model_sequential() %>%
layer_dense(units = 256,
input_shape = c(784), activation = "leaky_relu")
# Decoder
decoder <- keras_model_sequential() %>%
layer_dense(units = prod(pixels), input_shape = c(256), activation = "sigmoid")
knitr::opts_chunk$set(echo = TRUE)
library(MANOVA.RM)
install.packages(c("tidyverse", "dplyr", "magrittr", "ggplot2", "reshape2",
"ez", "MANOVA.RM", "nlme", "ggeffects", "gridExtra", "lme4",
"chron", "compareGroups", "survminer", "JM", ""joineRML"))
install.packages(c("tidyverse", "dplyr", "magrittr", "ggplot2", "reshape2",
"ez", "MANOVA.RM", "nlme", "ggeffects", "gridExtra", "lme4",
"chron", "compareGroups", "survminer", "JM", "joineRML"))
library(MANOVA.RM)
data(o2cons)
force(o2cons)
View(o2cons)
View(o2cons)
library(MANOVA.RM)
data(o2cons)
datos <- arrange(o2cons, Subject, Time)
library(dplyr)
library(MANOVA.RM)
data(o2cons)
datos <- arrange(o2cons, Subject, Time)
View(datos)
library(MANOVA.RM)
data(o2cons)
datos <- arrange(o2cons, Subject, Time)
library(ez)
datos.ez <- datos
datos.ez$Time <- factor(datos.ez$Time)
datos.ez$Subject <- factor(datos.ez$Subject)
ezANOVA(data=datos.ez, dv=medida, wid=Subject, within=Time, detailed = TRUE)
library(MANOVA.RM)
data(o2cons)
datos <- arrange(o2cons, Subject, Time)
library(ez)
datos.ez <- datos
datos.ez$Time <- factor(datos.ez$Time)
datos.ez$Subject <- factor(datos.ez$Subject)
ezANOVA(data=datos.ez, dv=O2, wid=Subject, within=Time, detailed = TRUE)
ezANOVA(data=datos.ez, dv=O2, wid=Subject, within=Time, detailed = TRUE)
knitr::opts_chunk$set(echo = TRUE,eval=T,include=T,message = FALSE,warning=FALSE)
pacman::p_load(tidyverse)
infarto<-read.table("recuperainfarto.txt",header=TRUE)
View(infarto)
infarto <- infarto %>%
mutate(id = 1:nrow(infarto)) %>%
select(id, everything())
View(infarto)
infart <- read.table("recuperainfarto.txt", header = TRUE)
infart <- infart %>%
mutate(id = 1:nrow(infart)) %>%
select(id, everything())
View(infart)
library(reshape2)
infart_llarg <- melt(infart, measure.vars=3:5,
variable.name = "tiempo",
value.name = "bartel")
View(infart_llarg)
View(infart)
View(infart_llarg)
View(infart)
library(reshape2)
infart_llarg <- melt(infart, measure.vars=3:7,
variable.name = "tiempo",
value.name = "bartel")
View(infart_llarg)
knitr::opts_chunk$set(echo = TRUE, eval=T, include=T, message = FALSE, warning=FALSE)
library(tidyverse)
library(reshape2)
infart_llarg <- melt(infart, measure.vars=3:7,
variable.name = "tiempo",
value.name = "bartel")
infart_llarg <- mutate(infart_llarg,
tiempo = str_remove(tiempo, "bartel_") %>%
as.numeric())
View(infart_llarg)
infart_llarg <- melt(infart, measure.vars=3:7,
variable.name = "tiempo",
value.name = "bartel")
infart_llarg <- mutate(infart_llarg,
tiempo = str_remove(tiempo, "bartel_") %>%
as.numeric())
infart_llarg <- as.data.frame(infart_llarg)
infart_llarg <- infart_llarg %>%
arrange(hospital, tiempo)
View(infart_llarg)
knitr::opts_chunk$set(echo = TRUE, eval=T, include=T, message = FALSE, warning=FALSE)
library(tidyverse)
library(reshape2)
library(ggplot2)
ggplot(infart_llarg, aes(x = tiempo, y = bartel, group = id)) +
geom_point() +
geom_line()+
facet_wrap(~id)
ggplot(infart_llarg, aes(x = tiempo, y = bartel, group = id)) +
geom_point() +
stat_smooth(method = "loess", se = FALSE, span = .9) +
facet_wrap(~id)
ggplot(infart_llarg, aes(x = tiempo, y = bartel, group = id)) +
geom_line(col="gray") +
stat_summary(aes(group = 1),
geom = "line",
fun = mean,
linewidth=2)+
facet_wrap(~hospital)
ggplot(infart_llarg, aes(x = tiempo, y = bartel, group = id)) +
geom_line(col="gray") +
stat_summary(aes(group = 1),
geom = "line",
fun = mean,
linewidth = 2)+
facet_wrap(~hospital)
knitr::opts_chunk$set(echo = TRUE, eval=T, include=T, message = FALSE, warning=FALSE)
library(ez)
knitr::opts_chunk$set(echo = TRUE, eval = TRUE, include = TRUE, message = FALSE, warning = FALSE)
library(geepack)
cerdos <- geepack::dietox
View(cerdos)
library(geepack)
cerdos <- geepack::dietox
summary(cerdos)
library(geepack)
library(tidyverse)
cerdos <- geepack::dietox
summary(cerdos)
library(geepack)
library(tidyverse)
cerdos <- geepack::dietox
cerdos <- cerdos %>%
as.factor(Time)
library(geepack)
library(tidyverse)
cerdos <- geepack::dietox
cerdos <- cerdos %>%
as.factor(cerdos$Time)
library(geepack)
library(tidyverse)
cerdos <- geepack::dietox
cerdos <- cerdos %>%
as.factor(Time)
library(geepack)
library(tidyverse)
cerdos <- geepack::dietox
cerdos <- cerdos %>%
as.factor()
View(cerdos)
library(geepack)
library(tidyverse)
cerdos <- geepack::dietox
cerdos <- mutate(cerdos$Time
as.factor())
library(geepack)
library(tidyverse)
cerdos <- geepack::dietox
cerdos <- mutate(cerdos$Time %>%
as.factor())
library(geepack)
library(tidyverse)
cerdos <- geepack::dietox
cerdos <- as.factor(cerdos$Time)
summary(cerdos)
library(geepack)
library(tidyverse)
cerdos <- geepack::dietox
cerdos <- cerdos%>%
as.factor(cerdos$Time)
library(geepack)
library(tidyverse)
cerdos <- geepack::dietox
cerdos <- cerdos%>%
mutate(Time = as.factor(Time))
summary(cerdos)
library(ggplot2)
library(dplyr)
ggplot(cerdos, aes(x = Time, y = Weight, color = as.factor(Evit), linetype = as.factor(Cu))) +
geom_line() +   # Para crear las líneas
geom_point() +  # Para mostrar los puntos de medición
labs(title = "Evolución del peso de los cerdos por niveles de Vitamina E y Cobre",
x = "Tiempo (semanas)",
y = "Peso (kg)",
color = "Vitamina E (mg/kg)",
linetype = "Cobre (mg/kg)") +
theme_minimal()
library(nlme)
library(nlme)
modelo<- lme(fixed = Weight ~ Time + Evit * Cu,
random = ~ 1 | Litter,
data = cerdos)
View(modelo)
View(cerdos)
knitr::opts_chunk$set(echo = TRUE, eval = TRUE, include = TRUE, message = FALSE, warning = FALSE)
library(HSAUR3)
?toenail
setwd("~/Desktop/universitat/GEA 4/ADL/GitHub/ECG_longitudinal")
knitr::opts_chunk$set(echo = TRUE, eval = TRUE, include = TRUE, message = FALSE, warning = FALSE)
egc3 <- file("ECGPCG0003", "rb")
egc3 <- file("ECGPCG0003.dat", "rb")
datos <- readBin(egc3, what = "numeric", n = 100)
close(egc3)
plot(datos)
egc3 <- file("ECGPCG0003.dat")
datos <- readBin(egc3, what = "numeric", n = 100)
egc3 <- file("ECGPCG0003.dat")
datos <- readBin(egc3, what = "integer", n = 100)
egc3 <- file("ECGPCG0003.dat")
datos <- readBin(egc3, what = "integer", size = 2 ,n = 10000)
egc3 <- "ECGPCG0003.dat"
datos <- readBin(egc3, what = "integer", size = 2 ,n = 10000)
close(egc3)
egc3 <- "ECGPCG0003.dat"
datos <- readBin(egc3, what = "integer", size = 2 ,n = 10000)
plot(datos)
egc3 <- "ECGPCG0003.dat"
datos <- readBin(egc3, what = "integer", n = 10000)
plot(datos)
egc3 <- "ECGPCG0003.dat"
datos <- readBin(egc3, what = "integer", n = 10000000)
plot(datos)
egc3 <- "ECGPCG0003.dat"
datos <- readBin(egc3, what = "integer", n = 240000)
plot(datos)
egc3 <- "ECGPCG0003.dat"
datos <- readBin(egc3, what = "integer", n = 240000)
plot(datos, type = "l")
egc3 <- "ECGPCG0003.dat"
datos <- readBin(egc3, what = "integer", n = max(egc3))
egc3 <- "ECGPCG0003.dat"
datos <- readBin(egc3, what = "integer", n = 200000)
plot(datos, type = "l")
egc3 <- "ECGPCG0003.dat"
datos <- readBin(egc3, what = "integer", n = 2000000)
plot(datos, type = "l")
egc3 <- "ECGPCG0003.dat"
datos <- readBin(egc3, what = "integer", n = 240000)
plot(datos, type = "l")
egc3 <- "ECGPCG0003.dat"
datos <- readBin(egc3, what = "integer", n = 24)
plot(datos, type = "l")
egc3 <- "ECGPCG0003.dat"
datos <- readBin(egc3, what = "integer", n = 100)
plot(datos, type = "l")
egc3 <- "ECGPCG0003.dat"
datos <- readBin(egc3, what = "integer", n = 1000)
plot(datos, type = "l")
egc3 <- "ECGPCG0003.dat"
datos <- readBin(egc3, what = "integer", n = 10000)
plot(datos, type = "l")
egc3 <- "ECGPCG0003.dat"
datos <- readBin(egc3, what = "integer", n = 100000)
plot(datos, type = "l")
egc3 <- "ECGPCG0003.dat"
datos <- readBin(egc3, what = "integer", n = 100000, size = 3)
egc3 <- "ECGPCG0003.dat"
datos <- readBin(egc3, what = "integer", n = 100000, size = 2)
plot(datos, type = "l")
egc3 <- "ECGPCG0003.dat"
datos <- readBin(egc3, what = "integer", n = 100000, size = 4)
plot(datos, type = "l")
egc3 <- "ECGPCG0003.dat"
datos <- readBin(egc3, what = "integer", n = 240000, size = 4)
# size = 4 ya que los datos enteros son de 32 bytes
plot(datos, type = "l")
egc3 <- "ECGPCG0003.dat"
datos <- readBin(egc3, what = "integer", size = 4)
# `size = 4` ya que los datos enteros son de 32 bytes, porque al leer el fichero nos da como 240000 datos (es decir, la división de 960000 bytes que tiene el archivo entre 4 bytes)
plot(datos, type = "l")
egc3 <- "ECGPCG0003.dat"
datos <- readBin(egc3, what = "integer", n = 240000, size = 4)
# `size = 4` ya que los datos enteros son de 32 bytes, porque al leer el fichero nos da como 240000 datos (es decir, la división de 960000 bytes que tiene el archivo entre 4 bytes)
plot(datos, type = "l")
library(pracma)
library(pracma)
# Supongamos que tus datos ya están cargados en la variable `datos`
picos <- findpeaks(datos)
# Imprimir los picos detectados
print(picos)
# Graficar los datos con los picos marcados
plot(datos, type = "l")
points(picos[, 2], picos[, 1], col = "red", pch = 19)  # Los picos en color rojo
# sub datos
datos2 <- readBin(egc3, what = "integer", n = 1000, size = 4)
library(pracma)
# Supongamos que tus datos ya están cargados en la variable `datos`
picos <- findpeaks(datos2)
# Imprimir los picos detectados
print(picos)
# Graficar los datos con los picos marcados
plot(datos2, type = "l")
points(picos[, 2], picos[, 1], col = "red", pch = 19)  # Los picos en color rojo
# Definir el archivo .dat
egc3 <- "ECGPCG0003.dat"
# Leer el archivo binario, con n siendo el número total de datos (240000 muestras por señal)
datos <- readBin(egc3, what = "integer", n = 480000, size = 2, signed = TRUE)
# Separar las señales ECG y PCG (como los datos están intercalados)
ecg <- datos[seq(1, length(datos), 2)]  # Señal ECG (índices impares)
pcg <- datos[seq(2, length(datos), 2)]  # Señal PCG (índices pares)
# Graficar las señales
par(mfrow = c(2, 1))
plot(ecg, type = "l", main = "ECG")
plot(pcg, type = "l", main = "PCG")
egc3 <- "ECGPCG0003.dat"
datos <- readBin(egc3, what = "integer", n = 240000, size = 4)
# `size = 4` ya que los datos enteros son de 32 bytes, porque al leer el fichero nos da como 240000 datos (es decir, la división de 960000 bytes que tiene el archivo entre 4 bytes)
plot(datos, type = "l")
# sub datos
datos2 <- readBin(egc3, what = "integer", n = 1000, size = 4)
library(pracma)
# Supongamos que tus datos ya están cargados en la variable `datos`
picos <- findpeaks(datos2)
# Imprimir los picos detectados
print(picos)
# Graficar los datos con los picos marcados
plot(datos2, type = "l")
points(picos[, 2], picos[, 1], col = "red", pch = 19)  # Los picos en color rojo
library(pracma)
# sub datos
datos2 <- readBin(egc3, what = "integer", n = 10000, size = 4)
# Supongamos que tus datos ya están cargados en la variable `datos`
picos <- findpeaks(datos2)
# Imprimir los picos detectados
print(picos)
# Graficar los datos con los picos marcados
plot(datos2, type = "l")
points(picos[, 2], picos[, 1], col = "red", pch = 19)  # Los picos en color rojo
library(pracma)
# sub datos
datos2 <- readBin(egc3, what = "integer", n = 100000, size = 4)
# Supongamos que tus datos ya están cargados en la variable `datos`
picos <- findpeaks(datos2)
# Imprimir los picos detectados
print(picos)
# Graficar los datos con los picos marcados
plot(datos2, type = "l")
points(picos[, 2], picos[, 1], col = "red", pch = 19)  # Los picos en color rojo
library(pracma)
# sub datos
datos2 <- readBin(egc3, what = "integer", n = 100000, size = 4)
# Supongamos que tus datos ya están cargados en la variable `datos`
picos <- findpeaks(datos2)
# Imprimir los picos detectados
print(picos)
# Graficar los datos con los picos marcados
plot(datos2, type = "l")
points(picos[, 2], picos[, 1], col = "red", pch = 1)  # Los picos en color rojo
egc3 <- "ECGPCG0003.dat"
datos <- readBin(egc3, what = "integer", n = 240000, size = 2)
plot(datos, type = "l")
install.packages("ecgkit")
library(ecgkit)
install.packages("ecgkit")
library(ecgkit)
install.packages("remotes")
remotes::install_github("ecgkit/ecgkit")
install.packages("pracma")
library(pracma)
# Suavizar señal para reducir ruido
ecg_smooth <- filter(ecg_data, rep(1/8, 8))
install.packages("pracma")
install.packages("pracma")
library(pracma)
# Suavizar señal para reducir ruido
ecg_smooth <- filter(datos, rep(1/8, 8))
# Detectar picos R
picos <- findpeaks(ecg_smooth, nups=1, ndowns=1, minpeakheight=mean(ecg_smooth) + 0.5*sd(ecg_smooth))
install.packages("pracma")
library(pracma)
# Suavizar señal para reducir ruido
ecg_smooth <- filter(datos, rep(1/8, 8))
# Detectar picos R
picos <- findpeaks(ecg_smooth, nups=1, ndowns=1, minpeakheight=mean(ecg_smooth) + 0.5*sd(ecg_smooth))
Fs <- 8000  # Asegúrate de que esta sea la frecuencia correcta
# Crear el filtro Butterworth de 4to orden con frecuencia de corte de 15 Hz
filtro <- butter(4, 15 / (Fs / 2), type = "low")
library(signal)
install.packages(signal)
install.packages("signal")
library(signal)
Fs <- 8000  # Asegúrate de que esta sea la frecuencia correcta
# Crear el filtro Butterworth de 4to orden con frecuencia de corte de 15 Hz
filtro <- butter(4, 15 / (Fs / 2), type = "low")
# Filtrar la señal ECG
ecg_smooth <- filtfilt(filtro, ecg_data_2)
library(signal)
Fs <- 8000  # Asegúrate de que esta sea la frecuencia correcta
# Crear el filtro Butterworth de 4to orden con frecuencia de corte de 15 Hz
filtro <- butter(4, 15 / (Fs / 2), type = "low")
# Filtrar la señal ECG
ecg_smooth <- filtfilt(filtro, ecg_data_2)
library(signal)
Fs <- 8000  # Asegúrate de que esta sea la frecuencia correcta
# Crear el filtro Butterworth de 4to orden con frecuencia de corte de 15 Hz
filtro <- butter(4, 15 / (Fs / 2), type = "low")
# Filtrar la señal ECG
ecg_smooth <- filtfilt(filtro, datos)
# Graficar la señal original
plot(datos, type="l", main="Señal ECG Original", xlab="Muestras", ylab="Amplitud")
# Graficar la señal filtrada
plot(ecg_smooth, type="l", main="ECG Filtrado", xlab="Muestras", ylab="Amplitud")
# Instalar y cargar el paquete necesario
install.packages("pracma")
library(pracma)
# Leer los datos (ya lo tienes)
egc3 <- "ECGPCG0003.dat"
datos <- readBin(egc3, what = "integer", n = 240000, size = 2)
# Filtrar la señal (ya lo tienes)
library(signal)
Fs <- 8000  # Frecuencia de muestreo
filtro <- butter(4, 15 / (Fs / 2), type = "low")
ecg_smooth <- filtfilt(filtro, datos)
# Graficar la señal original
plot(datos, type="l", main="Señal ECG Original", xlab="Muestras", ylab="Amplitud")
# Graficar la señal filtrada
plot(ecg_smooth, type="l", main="ECG Filtrado", xlab="Muestras", ylab="Amplitud")
install.packages("pracma")
# Detectar los picos en la señal filtrada
# findpeaks() devuelve los picos (y posiciones de los picos) en la señal
picos <- findpeaks(ecg_smooth, minpeakheight = 0.5, minpeakdistance = 150)
# Mostrar los picos detectados
print(picos)
# Graficar la señal filtrada con los picos detectados
plot(ecg_smooth, type="l", main="ECG Filtrado con Picos", xlab="Muestras", ylab="Amplitud")
points(picos[, 2], picos[, 1], col = "red", pch = 19)  # Poner los picos en rojo
# Instalar y cargar el paquete necesario
library(pracma)
# Leer los datos (ya lo tienes)
egc3 <- "ECGPCG0003.dat"
datos <- readBin(egc3, what = "integer", n = 240000, size = 2)
# Filtrar la señal (ya lo tienes)
library(signal)
Fs <- 8000  # Frecuencia de muestreo
filtro <- butter(4, 15 / (Fs / 2), type = "low")
ecg_smooth <- filtfilt(filtro, datos)
# Graficar la señal original
plot(datos, type="l", main="Señal ECG Original", xlab="Muestras", ylab="Amplitud")
# Graficar la señal filtrada
plot(ecg_smooth, type="l", main="ECG Filtrado", xlab="Muestras", ylab="Amplitud")
# Detectar los picos en la señal filtrada
# findpeaks() devuelve los picos (y posiciones de los picos) en la señal
picos <- findpeaks(ecg_smooth, minpeakheight = 0.5, minpeakdistance = 150)
# Mostrar los picos detectados
print(picos)
# Graficar la señal filtrada con los picos detectados
plot(ecg_smooth, type="l", main="ECG Filtrado con Picos", xlab="Muestras", ylab="Amplitud")
points(picos[, 2], picos[, 1], col = "red", pch = 19)  # Poner los picos en rojo
# Instalar y cargar el paquete necesario
library(pracma)
# Leer los datos (ya lo tienes)
egc3 <- "ECGPCG0003.dat"
datos <- readBin(egc3, what = "integer", n = 240000, size = 2)
# Filtrar la señal (ya lo tienes)
library(signal)
Fs <- 8000  # Frecuencia de muestreo
filtro <- butter(4, 15 / (Fs / 2), type = "low")
ecg_smooth <- filtfilt(filtro, datos)
# Graficar la señal original
plot(datos, type="l", main="Señal ECG Original", xlab="Muestras", ylab="Amplitud")
# Graficar la señal filtrada
plot(ecg_smooth, type="l", main="ECG Filtrado", xlab="Muestras", ylab="Amplitud")
# Detectar los picos en la señal filtrada
# findpeaks() devuelve los picos (y posiciones de los picos) en la señal
picos <- findpeaks(ecg_smooth, minpeakheight = 0.5, minpeakdistance = 150)
# Mostrar los picos detectados
# print(picos)
# Graficar la señal filtrada con los picos detectados
plot(ecg_smooth, type="l", main="ECG Filtrado con Picos", xlab="Muestras", ylab="Amplitud")
points(picos[, 2], picos[, 1], col = "red", pch = 19)  # Poner los picos en rojo
